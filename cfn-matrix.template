{
  "AWSTemplateFormatVersion" : "2010-09-09", 

  "Description" : "Actian Matrix Deployment Template",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        { "Label" : { "default" : "Matrix Leader Node" }, "Parameters" : [ "LeaderInstanceType" ] },
        { "Label" : { "default" : "Matrix Compute Node" }, "Parameters" : [ "ComputeInstanceType", "ComputeNodeNumber", "ComputeNodePctFS" ] },
        { "Label" : { "default" : "Matrix Installer" }, "Parameters" : [ "InstallerBucketName", "MatrixInstallFile" ] }
      ],
      "ParameterLabels" : {
        "LeaderInstanceType" : { "default" : "Instance Type" },
        "ComputeInstanceType" : { "default" : "Instance Type" },
        "ComputeNodeNumber" : { "default" : "Number of Nodes" },
        "ComputeNodePctFS" : { "default" : "Linux File Space %" },
        "InstallerBucketName" : { "default" : "Bucket Name" },
        "MatrixInstallFile" : { "default" : "Installer RUN File" },
        "IAMRole" : { "default" : "IAM Role Name" },
        "PlacementGroup" : { "default" : "Placement Group Name" },
        "PrivateSubnet" : { "default" : "Private Subnet ID" },
        "PublicSubnet" : { "default" : "Public Subnet ID" },
        "SecurityGroup" : { "default" : "Security Group ID" },
        "SSHKeyName" : { "default" : "KeyPair Name" },
        "s3fsBucketName" : { "default" : "s3fs Bucket Name" }
      }
    }
  },

  "Parameters" : {

    "LeaderInstanceType" : {
      "Description" : "EC2 instance type for Leader node",
      "Type" : "String",
      "Default" : "c3.2xlarge",
      "AllowedValues" : ["c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge",
                         "d2.xlarge","d2.2xlarge","d2.4xlarge","d2.8xlarge",
                         "i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type"
    },

    "ComputeInstanceType" : {
      "Description" : "EC2 instance type for Compute nodes",
      "Type" : "String",
      "Default" : "c3.4xlarge",
      "AllowedValues" : ["c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge",
                         "d2.xlarge","d2.2xlarge","d2.4xlarge","d2.8xlarge",
                         "i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type"
    },

    "ComputeNodeNumber": {
      "Description" : "Number of Compute Nodes for the Matrix cluster [1-20]",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "20",
      "Default": "2",
      "ConstraintDescription": "must be integer bwtween 1 and 20"
    },

    "ComputeNodePctFS": {
      "Description" : "Percentage of space on instance storage devices allocated for Linux file system [0-50]",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "50",
      "Default": "50",
      "ConstraintDescription": "Value must be integer bwtween 0 and 50"
    },

    "InstallerBucketName": {
      "Description" : "Name of S3 bucket containing the Matrix installer and scripts",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription": "must be a valid S3 bucket name"
    },

    "IAMRole": {
      "Description" : "Identity and Access Managment (IAM) Role with Read-Only access for EC2 and Full or Read-Only access for S3",
      "Type" : "String",
      "Default" : "MatrixRole",
      "ConstraintDescription": "must be a valid IAM Role name"
    },

    "MatrixInstallFile": {
      "Description" : "Name of the runnable Matrix installer without OS (e.g. PADB-Install-5.3.1.0-74380.el6-no_os.x86_64.run)",
      "Type" : "String",
      "Default" : "PADB-Install-5.3.1.0-74380.el6-no_os.x86_64.run",
      "ConstraintDescription": "must match the name of a file in InstallerBucketName"
    },

    "PlacementGroup": {
      "Description" : "Placement group name",
      "Type" : "String",
      "Default" : "MatrixPG",
      "ConstraintDescription": "must be a valid placement group name"
    },

    "PublicSubnet": {
      "Description" : "Public subnet in the target VPC and availability zone to use for the public IP address",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be a valid subnet id (subnet-xxxxxxxx)"
    },

    "PrivateSubnet": {
      "Description" : "Private subnet in the target VPC and availability zone to use for all of the nodes in the Matrix cluster",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be a valid subnet id (subnet-xxxxxxxx)"
    },

    "SecurityGroup": {
      "Description" : "Name of a security group with external SSH access and open access for all inbound traffic originating from both the specified public and private subnets",
      "Type": "AWS::EC2::SecurityGroup::Id",
      "ConstraintDescription": "must be a valid security group id (sg-xxxxxxxx)"
    },

    "SSHKeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the leader node instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "255"
    },

    "s3fsBucketName": {
      "Description" : "Name of S3 bucket attach to each node as a s3fs-fuse file system",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription": "must be a valid S3 bucket name"
    }

  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {      
                           "AMI"                    : "ami-714b5c1b"
       }
    }
  },

  "Resources" : {
    "LeaderEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "LeaderENI" : {
    "Type" : "AWS::EC2::NetworkInterface",
    "Properties" : {
      "GroupSet" : [ { "Ref" : "SecurityGroup" } ],
      "SourceDestCheck" : "False",
      "SubnetId" : { "Ref" : "PublicSubnet" }
      }
    },

    "LeaderIP" : {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": { "Fn::GetAtt" : [ "LeaderEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "LeaderENI" }
      },
      "DependsOn" : [ "LeaderENI" ]
    }, 

    "LeaderENIAttachment" : {
      "Type" : "AWS::EC2::NetworkInterfaceAttachment",
      "Properties" : {
        "DeleteOnTermination": "True",
        "DeviceIndex": "2",
        "InstanceId": { "Ref" : "LeaderNode" },
        "NetworkInterfaceId": { "Ref" : "LeaderENI" }
      },
      "DependsOn" : [ "LeaderNode", "LeaderENI" ]
    },


    "LeaderNode" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : ["RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroupIds" : [ { "Ref" : "SecurityGroup" } ],
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "IamInstanceProfile": { "Ref" : "IAMRole"},
        "InstanceType" : { "Ref" : "LeaderInstanceType" },
        "KeyName" : { "Ref" : "SSHKeyName" },
        "PlacementGroupName" : { "Ref" : "PlacementGroup" },
        "Tags" : [ {"Key" : "Name", "Value" : "LeaderNode" } ],
        "BlockDeviceMappings" : [
          {
            "DeviceName"  : "/dev/sdb",
            "VirtualName" : "ephemeral0"
          },
          {
            "DeviceName"  : "/dev/sdc",
            "VirtualName" : "ephemeral1"
          },
          {
            "DeviceName"  : "/dev/sdd",
            "VirtualName" : "ephemeral2"
          },
          {
            "DeviceName"  : "/dev/sde",
            "VirtualName" : "ephemeral3"
          },
          {
            "DeviceName"  : "/dev/sdf",
            "VirtualName" : "ephemeral4"
          },
          {
            "DeviceName"  : "/dev/sdg",
            "VirtualName" : "ephemeral5"
          },
          {
            "DeviceName"  : "/dev/sdh",
            "VirtualName" : "ephemeral6"
          },
          {
            "DeviceName"  : "/dev/sdi",
            "VirtualName" : "ephemeral7"
          },
          {
            "DeviceName"  : "/dev/sdj",
            "VirtualName" : "ephemeral8"
          },
          {
            "DeviceName"  : "/dev/sdk",
            "VirtualName" : "ephemeral9"
          },
          {
            "DeviceName"  : "/dev/sdl",
            "VirtualName" : "ephemeral10"
          },
          {
            "DeviceName"  : "/dev/sdm",
            "VirtualName" : "ephemeral11"
          },
          {
            "DeviceName"  : "/dev/sdn",
            "VirtualName" : "ephemeral12"
          },
          {
            "DeviceName"  : "/dev/sdo",
            "VirtualName" : "ephemeral13"
          },
          {
            "DeviceName"  : "/dev/sdp",
            "VirtualName" : "ephemeral14"
          },
          {
            "DeviceName"  : "/dev/sdq",
            "VirtualName" : "ephemeral15"
          },
          {
            "DeviceName"  : "/dev/sdr",
            "VirtualName" : "ephemeral16"
          },
          {
            "DeviceName"  : "/dev/sds",
            "VirtualName" : "ephemeral17"
          },
          {
            "DeviceName"  : "/dev/sdt",
            "VirtualName" : "ephemeral18"
          },
          {
            "DeviceName"  : "/dev/sdu",
            "VirtualName" : "ephemeral19"
          },
          {
            "DeviceName"  : "/dev/sdv",
            "VirtualName" : "ephemeral20"
          },
          {
            "DeviceName"  : "/dev/sdw",
            "VirtualName" : "ephemeral21"
          },
          {
            "DeviceName"  : "/dev/sdx",
            "VirtualName" : "ephemeral22"
          },
          {
            "DeviceName"  : "/dev/sdy",
            "VirtualName" : "ephemeral23"
          }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -x\n",

          "exec > /tmp/part-001.log 2>&1\n",

          "# Prepare all of the instance storage disks.  This assumes all of the disks\n",
          "# are named /dev/xvdb ... /dev/xvdy and that each disk is identical.\n",
          "diskCnt=0\n",

          "# Comment out any references to xvdb that might be in fstab\n",
          "sed -i 's/\\/dev\\/xvdb/#\\/dev\\/xvdb/' /etc/fstab\n",

          "for disk in /dev/xvd[bcdefghijklmnopqrstuvwxy]\n",
          "do\n",
          "  umount $disk\n",
          "    echo -e \"n\np\n1\n\n\nt\n83\nw\n\" | fdisk ${disk}\n",
          "    partx -v -a ${disk}\n",
          "    mkfs.xfs ${disk}1\n",
          "    mkdir /mnt/d${diskCnt}\n",
          "    echo \"${disk}1 /mnt/d${diskCnt}  xfs noatime,nodiratime        0 0\" >> /etc/fstab\n",
          "  diskCnt=$((diskCnt + 1))\n",
          "done\n",

          "s3fsbucket=",{ "Ref" : "s3fsBucketName" },"\n",
          "if [[ $s3fsbucket = *[!\\ ]* ]]\n",
          "then\n",
          "  mkdir -p /mnt/s3/${s3fsbucket}\n",
          "  echo \"${s3fsbucket} /mnt/s3/${s3fsbucket}  fuse.s3fs _netdev,allow_other,uid=501,gid=501,iam_role=",{ "Ref" : "IAMRole" },"        0 0\" >> /etc/fstab\n",
          "fi\n",
          "mount -a\n",

          "export HOME=\"/root\"\n",
          "export NODENUMBER=",{ "Ref" : "ComputeNodeNumber" },"\n",

          "# Download Matrix Installer and config files from S3\n",
          "mkdir /tmp/scripts\n",
          "yum --enablerepo epel-testing install s3cmd -y\n",
          "s3cmd -r get s3://",{ "Ref" : "InstallerBucketName" },"/ /tmp/ >> /tmp/s3cmd.log\n",

          "# Modify files to be executable and replace dynamic runtime values\n",
          "chmod 755 /tmp/",{ "Ref" : "MatrixInstallFile" },"\n",
          "echo \"",{ "Ref" : "myWaitHandle" },"\" >> /tmp/signalURL\n",
          "sed -i 's/\\&/\\\\\\&/g' /tmp/signalURL\n",
          "export SIGNALURL=\"$(cat /tmp/signalURL)\"\n",
          "sed -i \"s!signalURL=!signalURL=\\\"$SIGNALURL\\\"!g\" /tmp/scripts/stage-two-install-wrapper\n",
          "chmod 755 /tmp/scripts/stage-two-install-wrapper\n",
          "chmod 755 /tmp/scripts/stage-two-install.exp\n",

          "# Set cron to execute stage two install after reboot\n",
          "echo \"@reboot paraccel /tmp/scripts/stage-two-install-wrapper >> /tmp/stage-two-install.log\" >> /etc/cron.d/stageTwoInstall\n",

          "# Update sshd to allow password login\n",
          "sed -i 's/PasswordAuthentication no/#PasswordAuthentication no/' /etc/ssh/sshd_config\n",
          "sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config\n",
          "sudo /etc/init.d/sshd reload",

          "# Use AWS CLI to acquire private IPs of compute nodes in CF stack\n",
          "export NODENUMBER=$(expr ",{ "Ref" : "ComputeNodeNumber" },")\n",
          "touch /tmp/computeIPs\n",
          "while [ $(wc -l /tmp/computeIPs | cut -f1 -d ' ') -ne \"$NODENUMBER\" ]; do\n",
            "/usr/local/bin/aws ec2 describe-instances ",
              "--region=",{ "Ref" : "AWS::Region" }," ",
              "--filters 'Name=tag-value,Values=",{ "Ref" : "AWS::StackName" },"' ",
              "'Name=tag-value,Values=ComputeNode' ",
              "| jq '.Reservations[].Instances[].PrivateIpAddress' ",
              "| sed '/null/d' ",
              "> /tmp/computeIPs\n",
          "sleep 3s\n",
          "done\n",

          "# Remove quotes from computeIPs file\n",
          "sed -i 's/\\\"//g' /tmp/computeIPs\n",

          "# Ensure all compute nodes can be connected to via ssh before beginning Matrix installation (Uses /tmp/computeIPs)\n",
          "yum install nc -y\n",
          "while read ip; do while ! nc -z -w 1 $ip 22 >&/dev/null; do :; done; done </tmp/computeIPs\n",

          "# Install Matrix Stage 1\n",
          "yum install expect -y\n",
          "totalNodes=$(($NODENUMBER + 1))\n",
          "ipSpec=\"$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')\"\n",
          "while read ip; do ipSpec=\"$ipSpec;$ip\"; done </tmp/computeIPs\n",
          "chmod 700 /tmp/scripts/stage-one-install.exp\n",
          "/tmp/scripts/stage-one-install.exp \"$totalNodes\" \"$ipSpec\" ",{"Ref" : "MatrixInstallFile"}," >> /tmp/stage-one-install.log\n",

          "reboot\n"

        ]]}} 
      }
    }, 

    "ComputeNodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "DesiredCapacity" : { "Ref" : "ComputeNodeNumber" },
        "LaunchConfigurationName" : { "Ref" : "ComputeNodeLaunchConfig" },
        "MaxSize" : { "Ref" : "ComputeNodeNumber" },
        "MinSize" : { "Ref" : "ComputeNodeNumber" },
        "PlacementGroup" : { "Ref" : "PlacementGroup" },
        "Tags" : [ {"Key" : "Name", "Value" : "ComputeNode", "PropagateAtLaunch" : "True" }],
        "VPCZoneIdentifier" : [
          { "Ref" : "PrivateSubnet" }
        ]
      }
    }, 

    "ComputeNodeLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "AssociatePublicIpAddress" : "False",
        "ImageId" : { "Fn::FindInMap" : ["RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "IamInstanceProfile": { "Ref" : "IAMRole"},
        "InstanceType" : { "Ref" : "ComputeInstanceType" },
        "KeyName" : { "Ref" : "SSHKeyName" },
        "SecurityGroups" : [ { "Ref" : "SecurityGroup" } ],
        "BlockDeviceMappings" : [
          {
            "DeviceName"  : "/dev/sdb",
            "VirtualName" : "ephemeral0"
          },
          {
            "DeviceName"  : "/dev/sdc",
            "VirtualName" : "ephemeral1"
          },
          {
            "DeviceName"  : "/dev/sdd",
            "VirtualName" : "ephemeral2"
          },
          {
            "DeviceName"  : "/dev/sde",
            "VirtualName" : "ephemeral3"
          },
          {
            "DeviceName"  : "/dev/sdf",
            "VirtualName" : "ephemeral4"
          },
          {
            "DeviceName"  : "/dev/sdg",
            "VirtualName" : "ephemeral5"
          },
          {
            "DeviceName"  : "/dev/sdh",
            "VirtualName" : "ephemeral6"
          },
          {
            "DeviceName"  : "/dev/sdi",
            "VirtualName" : "ephemeral7"
          },
          {
            "DeviceName"  : "/dev/sdj",
            "VirtualName" : "ephemeral8"
          },
          {
            "DeviceName"  : "/dev/sdk",
            "VirtualName" : "ephemeral9"
          },
          {
            "DeviceName"  : "/dev/sdl",
            "VirtualName" : "ephemeral10"
          },
          {
            "DeviceName"  : "/dev/sdm",
            "VirtualName" : "ephemeral11"
          },
          {
            "DeviceName"  : "/dev/sdn",
            "VirtualName" : "ephemeral12"
          },
          {
            "DeviceName"  : "/dev/sdo",
            "VirtualName" : "ephemeral13"
          },
          {
            "DeviceName"  : "/dev/sdp",
            "VirtualName" : "ephemeral14"
          },
          {
            "DeviceName"  : "/dev/sdq",
            "VirtualName" : "ephemeral15"
          },
          {
            "DeviceName"  : "/dev/sdr",
            "VirtualName" : "ephemeral16"
          },
          {
            "DeviceName"  : "/dev/sds",
            "VirtualName" : "ephemeral17"
          },
          {
            "DeviceName"  : "/dev/sdt",
            "VirtualName" : "ephemeral18"
          },
          {
            "DeviceName"  : "/dev/sdu",
            "VirtualName" : "ephemeral19"
          },
          {
            "DeviceName"  : "/dev/sdv",
            "VirtualName" : "ephemeral20"
          },
          {
            "DeviceName"  : "/dev/sdw",
            "VirtualName" : "ephemeral21"
          },
          {
            "DeviceName"  : "/dev/sdx",
            "VirtualName" : "ephemeral22"
          },
          {
            "DeviceName"  : "/dev/sdy",
            "VirtualName" : "ephemeral23"
          }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -x\n",

          "exec > /tmp/part-001.log 2>&1\n",

          "# Update sshd to allow password login\n",
          "sed -i 's/PasswordAuthentication no/#PasswordAuthentication no/' /etc/ssh/sshd_config\n",
          "sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config\n",
          "sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config\n",
          "/etc/init.d/sshd reload",

          "# Determine how to allocate space for each of the instance storage disks.\n",
          "totalCylinders=$(fdisk -l | grep -A 1 'xvdb' | grep 'cylinders' | awk -F, '{print $3}' | awk '{print $1}')\n",
          "cylinderSplit=$(($totalCylinders / 2))\n",
          "isDiskCnt=$(ls /dev/xvd[bcdefghijklmnopqrstuvwxy] | wc -w)\n",
          "memGB=$(cat /proc/meminfo | grep 'MemTotal' | awk '{printf(\"%.0f\\n\", $2 / (1024 ^ 2))}')\n",
          "swapCylinders=$(($memGB * 128 / $isDiskCnt))\n",
          "availCylinders=$(($totalCylinders - $swapCylinders))\n",
          "rawCylinders=$(($availCylinders * (100 - ", {"Ref" : "ComputeNodePctFS"}, ") / 100))\n",
          "fsCylinders=$(($availCylinders - $rawCylinders))\n",

          "# Prepare all of the instance storage disks.  This assumes all of the disks\n",
          "# are named /dev/xvdb ... /dev/xvdy and that each disk is identical.\n",
          "diskCnt=0\n",

          "# Comment out any references to xvdb that might be in fstab\n",
          "sed -i 's/\\/dev\\/xvdb/#\\/dev\\/xvdb/' /etc/fstab\n",

          "for disk in /dev/xvd[bcdefghijklmnopqrstuvwxy]\n",
          "do\n",
          "  umount $disk\n",
          "  echo -e \"n\np\n1\n\n+$rawCylinders\nt\nda\nn\np\n2\n\n+$swapCylinders\nt\n2\n82\np\nw\n\" | fdisk $disk\n",
          "  mkswap ${disk}2 && swapon ${disk}2\n",
          "  echo \"${disk}2 swap  swap defaults        0 0\" >> /etc/fstab\n",
          "  if [ $fsCylinders -gt 0 ]\n",
          "  then\n",
          "    echo -e \"n\np\n3\n\n\nt\n3\n83\nw\n\" | fdisk ${disk}\n",
          "    partx -v -a ${disk}\n",
          "    mkfs.xfs ${disk}3\n",
          "    mkdir /mnt/d${diskCnt}\n",
          "    echo \"${disk}3 /mnt/d${diskCnt}  xfs noatime,nodiratime        0 0\" >> /etc/fstab\n",
          "  fi\n",
          "  diskCnt=$((diskCnt + 1))\n",
          "done\n",

          "s3fsbucket=",{ "Ref" : "s3fsBucketName" },"\n",
          "shard_index=$(curl http://169.254.169.254/latest/meta-data/ami-launch-index)\n",
          "shard_index=$((shard_index+1))\n",
          "if [[ $s3fsbucket = *[!\\ ]* ]]\n",
          "then\n",
          "  mkdir -p /mnt/s3/${s3fsbucket}\n",
          "  echo \"${s3fsbucket} /mnt/s3/${s3fsbucket}  fuse.s3fs _netdev,allow_other,uid=501,gid=501,shard_count=",{ "Ref" : "ComputeNodeNumber" },",shard_index=${shard_index},iam_role=",{ "Ref" : "IAMRole" },"        0 0\" >> /etc/fstab\n",
          "fi\n",

          "mount -a\n",

          "# Change root password to 'actian' for username/password access to Compute nodes\n",
          "echo 'root:actian' > /root/pwdfile\n",
          "< /root/pwdfile chpasswd\n",
          "/etc/init.d/sshd reload"
        ]]}}
      }
    },  

    "myWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },

    "MatrixInstalledWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Count" : "1",
        "Handle" : { "Ref" : "myWaitHandle" },
        "Timeout" : "3600"
      }
    }
  },

  "Outputs" : {
    "ApplicationData" : {
      "Value" : { "Fn::GetAtt" : [ "MatrixInstalledWaitCondition", "Data" ]},
      "Description" : "The data passed back as part of signalling the WaitCondition."
    }
  }
}
